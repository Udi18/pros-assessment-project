{"version":3,"sources":["components/InputNamesField.js","components/LanguageSelector.js","components/TextToTranslateField.js","components/NameTags.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["InputNamesField","props","onNamesChangeHandler","names","react_default","a","createElement","style","padding","paddingRight","name","value","cols","rows","onChange","required","LanguageSelector","languageOptions","onLanguageSelectHandler","Object","values","map","lang","key","TextToTranslateField","onGreetingInputHandler","width","NameTags","translatedText","tagCreator","split","border","display","alignItems","justifyContent","flexDirection","margin","flexWrap","Button","onButtonClick","route","onClick","determineRoute","App","state","textToTranslate","languageChoice","keyFinder","obj","keys","find","_this","setState","onSubmitHandler","langObj","langChoice","event","text","encodeURI","concat","preventDefault","fetch","then","response","json","parsedJSON","catch","error","console","log","target","language","greeting","routeHandler","_this$state","onSubmit","components_InputNamesField","components_LanguageSelector","components_TextToTranslateField","components_Button","components_NameTags","_this2","this","langs","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.316815f8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst InputNamesField = (props) => {\r\n  const { onNamesChangeHandler, names } = props;\r\n  return (\r\n    <div style={{ padding: '30px' }}>\r\n      <h3 style={{ paddingRight: '20px' }}>Names:</h3>\r\n      <textarea \r\n        name=\"names\"\r\n        value={names}\r\n        cols=\"25\"\r\n        rows=\"15\"\r\n        onChange={onNamesChangeHandler}\r\n        required></textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputNamesField;","import React from 'react';\r\n\r\nconst LanguageSelector = (props) => {\r\n  const { languageOptions, onLanguageSelectHandler } = props;\r\n  const optionsCreator = langs => langs.map(lang => <option key={lang}>{lang}</option>)\r\n\r\n  return (\r\n    <div style={{ padding: '30px' }}>\r\n      <h3 style={{ paddingRight: '20px' }}>Language options:</h3>\r\n      <select onChange={onLanguageSelectHandler} required>\r\n        <option>Please select language</option>\r\n        {optionsCreator(Object.values(languageOptions))}\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LanguageSelector;\r\n","import React from 'react';\r\n\r\nconst TextToTranslateField = (props) => {\r\n  const { onGreetingInputHandler } = props;\r\n  return (\r\n    <div style={{ padding: '30px' }}>\r\n    <h3 style={{ paddingRight: '20px' }}>Please enter a greeting for the name tags.</h3>\r\n    <input\r\n      required\r\n      style={{ width: '350px'}}\r\n      onChange={onGreetingInputHandler}>\r\n    </input>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default TextToTranslateField;\r\n","import React from 'react';\r\n\r\nconst NameTags = (props) => {\r\n  const { names, translatedText } = props;\r\n  const namesArray = names.split('\\n')\r\n\r\n  const tagCreator = namesArray.map(name => {\r\n    return (\r\n      <div style={{\r\n        border: 'solid',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        margin: '10px',\r\n        width: '300px',}}\r\n        key={name}>\r\n        <h3>{translatedText}</h3>\r\n        <h2>{name}</h2>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n      }}>\r\n        {tagCreator}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default NameTags;","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n  const { onButtonClick, route } = props;\r\n\r\nconst determineRoute = (route) => {\r\n  if (route === 'tags') {\r\n    return 'Back';\r\n  }\r\n  return 'Generate'\r\n}\r\n\r\n  return (\r\n    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n      <button onClick={onButtonClick}>{determineRoute(route)}</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\nimport './App.css';\nimport InputNamesField from './components/InputNamesField';\nimport LanguageSelector from './components/LanguageSelector';\nimport TextToTranslateField from './components/TextToTranslateField';\nimport NameTags from './components/NameTags';\nimport Button from './components/Button';\n\nclass App extends Component {\n  state = {\n    languageOptions: {},\n    names: '',\n    textToTranslate: '',\n    languageChoice: '',\n    translatedText: '',\n    route: 'home',\n  }\n\n  componentDidMount() {\n    const apiKey = 'key=trnsl.1.1.20190125T225412Z.10a346ef55de66c0.c6a59bb3601e9dbe458c012ab1cd29461c9f7c2d'\n    const language = '&ui=en'\n    fetch('https://translate.yandex.net/api/v1.5/tr.json/getLangs?' + apiKey + language)\n      .then(response => response.json())\n      .then(parsedJSON => this.setState({ languageOptions: parsedJSON.langs }))\n      .catch(error => console.log('Something went wrong!', error))\n  }\n\n  keyFinder = (obj, value) => {\n    return Object.keys(obj).find(key => obj[key] === value);\n  }\n  onButtonClick = () => {\n    if (this.state.route === 'home') {\n      return this.setState({ route: 'tags' });\n    }\n    return this.setState({ route: 'home' });\n  }\n\n  onSubmitHandler = (keyFinder, langObj, langChoice) => (event) => {\n    const apiKey = 'key=trnsl.1.1.20190125T225412Z.10a346ef55de66c0.c6a59bb3601e9dbe458c012ab1cd29461c9f7c2d';\n    const text = encodeURI(`&text=${this.state.textToTranslate}`);\n    const lang = `&lang=en-${keyFinder(langObj, langChoice)}`\n    event.preventDefault();\n    fetch('https://translate.yandex.net/api/v1.5/tr.json/translate?' + apiKey + text + lang)\n      .then(response => response.json())\n      .then(parsedJSON => this.setState({ translatedText: parsedJSON.text[0] }))\n      .catch(error => console.log('Something went wrong!', error))\n    this.onButtonClick();\n  }\n\n  onNamesChangeHandler = (event) => {\n    let names = event.target.value;\n    this.setState({ names: names })\n  }\n\n\n  onLanguageSelectHandler = (event) => {\n    let language = event.target.value;\n    this.setState({ languageChoice: language })\n  }\n\n  onGreetingInputHandler = (event) => {\n    let greeting = event.target.value\n    this.setState({ textToTranslate: greeting })\n  }\n\n  routeHandler = () => {\n    const { names, languageOptions, textToTranslate, languageChoice, translatedText, route } = this.state;\n    const pageStyle = { display: 'flex', justifyContent: 'center' }\n    if (route === 'home') {\n      return (\n        <form onSubmit={this.onSubmitHandler(this.keyFinder, languageOptions, languageChoice)}>\n          <div style={pageStyle}>\n            <InputNamesField\n              onNamesChangeHandler={this.onNamesChangeHandler}\n              names={names}\n            />\n            <LanguageSelector\n              languageOptions={languageOptions}\n              onLanguageSelectHandler={this.onLanguageSelectHandler}\n            />\n            <TextToTranslateField\n              textToTranslate={textToTranslate}\n              onGreetingInputHandler={this.onGreetingInputHandler}\n            />\n          </div>\n          <Button /> \n        </form>\n      )\n    }\n    if (route === 'tags') {\n      return (\n      <div>\n        <NameTags names={names} translatedText={translatedText} />\n        <Button onButtonClick={this.onButtonClick} route={route} />\n      </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.routeHandler()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}